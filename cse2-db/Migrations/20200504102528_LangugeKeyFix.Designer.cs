// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cse2_db.DataAccess;

namespace cse2_db.Migrations
{
    [DbContext(typeof(MediaContext))]
    [Migration("20200504102528_LangugeKeyFix")]
    partial class LangugeKeyFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("cse2_db.Entities.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("cse2_db.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("cse2_db.Entities.ContentRating", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ContentRating");
                });

            modelBuilder.Entity("cse2_db.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("cse2_db.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("cse2_db.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying(5000)")
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("cse2_db.Entities.KeyWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("KeyWord");
                });

            modelBuilder.Entity("cse2_db.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("cse2_db.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("cse2_db.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("AvgRating")
                        .HasColumnType("real");

                    b.Property<short?>("ContentRatingId")
                        .HasColumnType("smallint");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImdbId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StoryLine")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<long>("VotesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AirDate");

                    b.HasIndex("AvgRating");

                    b.HasIndex("ContentRatingId");

                    b.HasIndex("Duration");

                    b.HasIndex("ImageId");

                    b.HasIndex("ImdbId");

                    b.HasIndex("Title");

                    b.HasIndex("VotesCount");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Importance");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("MovieCast");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCastCharacter", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieCastId")
                        .HasColumnType("bigint");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MovieCastId");

                    b.ToTable("MovieCastCharacter");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCompany", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCompany");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCountry", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasIndex("CountryId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCountry");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieDirector", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("MovieDirector");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieGenre", b =>
                {
                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieKeyWord", b =>
                {
                    b.Property<long>("KeyWordId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasIndex("KeyWordId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieKeyWord");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieLanguage", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MovieLanguage");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieLocation", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasIndex("LocationId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieLocation");
                });

            modelBuilder.Entity("cse2_db.Entities.MoviePlatform", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<long?>("PlatformId1")
                        .HasColumnType("bigint");

                    b.HasKey("MovieId", "PlatformId");

                    b.HasIndex("PlatformId1");

                    b.ToTable("MoviePlatform");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieProducer", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("MovieProducer");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieWriter", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("MovieWriter");
                });

            modelBuilder.Entity("cse2_db.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImdbId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BirthDate");

                    b.HasIndex("DeathDate");

                    b.HasIndex("FullName");

                    b.HasIndex("ImageId");

                    b.HasIndex("ImdbId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("cse2_db.Entities.Platform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(5000)")
                        .HasMaxLength(5000);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("cse2_db.Entities.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ImdbId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("TVSeriesImdbId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("TvSeriesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId");

                    b.HasIndex("SeasonNumber");

                    b.HasIndex("TVSeriesImdbId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("AvgRating")
                        .HasColumnType("real");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImdbId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoryLine")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long>("VotesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AirDate");

                    b.HasIndex("AvgRating");

                    b.HasIndex("Duration");

                    b.HasIndex("EpisodeNumber");

                    b.HasIndex("ImageId");

                    b.HasIndex("ImdbId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("Title");

                    b.HasIndex("VotesCount");

                    b.ToTable("TvEpisode");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Importance");

                    b.HasIndex("PersonId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeCast");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCastCharacter", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeCastId")
                        .HasColumnType("bigint");

                    b.HasKey("CharacterId", "TvEpisodeCastId");

                    b.HasIndex("TvEpisodeCastId");

                    b.ToTable("TvEpisodeCastCharacter");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCompany", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeCompany");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCountry", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasIndex("CountryId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeCountry");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeDirector", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId", "TvEpisodeId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeDirector");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeGenre", b =>
                {
                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasIndex("GenreId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeGenre");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeKeyWord", b =>
                {
                    b.Property<long>("KeyWordId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasIndex("KeyWordId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeKeyWord");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeLanguage", b =>
                {
                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("TvEpisodeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("TvEpisodeLanguage");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeLocation", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasIndex("LocationId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeLocation");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeProducer", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId", "TvEpisodeId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeProducer");
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeWriter", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvEpisodeId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId", "TvEpisodeId");

                    b.HasIndex("TvEpisodeId");

                    b.ToTable("TvEpisodeWriter");
                });

            modelBuilder.Entity("cse2_db.Entities.TvSeries", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("AvgRating")
                        .HasColumnType("real");

                    b.Property<short?>("ContentRatingId")
                        .HasColumnType("smallint");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImdbId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StoryLine")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<long>("VotesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvgRating");

                    b.HasIndex("ContentRatingId");

                    b.HasIndex("Duration");

                    b.HasIndex("ImageId");

                    b.HasIndex("ImdbId");

                    b.HasIndex("Title");

                    b.HasIndex("VotesCount");

                    b.ToTable("TvSeries");
                });

            modelBuilder.Entity("cse2_db.Entities.TvSeriesKeyWord", b =>
                {
                    b.Property<long>("KeyWordId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvSeriesId")
                        .HasColumnType("bigint");

                    b.HasIndex("KeyWordId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("TvSeriesKeyWord");
                });

            modelBuilder.Entity("cse2_db.Entities.TvSeriesPlatform", b =>
                {
                    b.Property<long>("TvSeriesId")
                        .HasColumnType("bigint");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<long?>("PlatformId1")
                        .HasColumnType("bigint");

                    b.HasKey("TvSeriesId", "PlatformId");

                    b.HasIndex("PlatformId1");

                    b.ToTable("TvSeriesPlatform");
                });

            modelBuilder.Entity("cse2_db.Entities.Movie", b =>
                {
                    b.HasOne("cse2_db.Entities.ContentRating", "ContentRating")
                        .WithMany()
                        .HasForeignKey("ContentRatingId");

                    b.HasOne("cse2_db.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCast", b =>
                {
                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCastCharacter", b =>
                {
                    b.HasOne("cse2_db.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.MovieCast", "MovieCast")
                        .WithMany()
                        .HasForeignKey("MovieCastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCompany", b =>
                {
                    b.HasOne("cse2_db.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieCountry", b =>
                {
                    b.HasOne("cse2_db.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieDirector", b =>
                {
                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieGenre", b =>
                {
                    b.HasOne("cse2_db.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieKeyWord", b =>
                {
                    b.HasOne("cse2_db.Entities.KeyWord", "KeyWord")
                        .WithMany()
                        .HasForeignKey("KeyWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieLanguage", b =>
                {
                    b.HasOne("cse2_db.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieLocation", b =>
                {
                    b.HasOne("cse2_db.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MoviePlatform", b =>
                {
                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId1");
                });

            modelBuilder.Entity("cse2_db.Entities.MovieProducer", b =>
                {
                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.MovieWriter", b =>
                {
                    b.HasOne("cse2_db.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.Person", b =>
                {
                    b.HasOne("cse2_db.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("cse2_db.Entities.Season", b =>
                {
                    b.HasOne("cse2_db.Entities.TvSeries", "TvSeries")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisode", b =>
                {
                    b.HasOne("cse2_db.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("cse2_db.Entities.Season", "Season")
                        .WithMany("TvEpisodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCast", b =>
                {
                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCastCharacter", b =>
                {
                    b.HasOne("cse2_db.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisodeCast", "TvEpisodeCast")
                        .WithMany()
                        .HasForeignKey("TvEpisodeCastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCompany", b =>
                {
                    b.HasOne("cse2_db.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeCountry", b =>
                {
                    b.HasOne("cse2_db.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeDirector", b =>
                {
                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeGenre", b =>
                {
                    b.HasOne("cse2_db.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeKeyWord", b =>
                {
                    b.HasOne("cse2_db.Entities.KeyWord", "KeyWord")
                        .WithMany()
                        .HasForeignKey("KeyWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeLanguage", b =>
                {
                    b.HasOne("cse2_db.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeLocation", b =>
                {
                    b.HasOne("cse2_db.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeProducer", b =>
                {
                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvEpisodeWriter", b =>
                {
                    b.HasOne("cse2_db.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvEpisode", "TvEpisode")
                        .WithMany()
                        .HasForeignKey("TvEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvSeries", b =>
                {
                    b.HasOne("cse2_db.Entities.ContentRating", "ContentRating")
                        .WithMany()
                        .HasForeignKey("ContentRatingId");

                    b.HasOne("cse2_db.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("cse2_db.Entities.TvSeriesKeyWord", b =>
                {
                    b.HasOne("cse2_db.Entities.KeyWord", "KeyWord")
                        .WithMany()
                        .HasForeignKey("KeyWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cse2_db.Entities.TvSeries", "TvSeries")
                        .WithMany()
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cse2_db.Entities.TvSeriesPlatform", b =>
                {
                    b.HasOne("cse2_db.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId1");

                    b.HasOne("cse2_db.Entities.TvSeries", "TvSeries")
                        .WithMany()
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
